<?php
/**
* @file
*
* Build and display custom Admin Dashboard page
*
*/

/**
 * General page stuff
 * User permissions
 * Hook menu
 * User login
 * Page theme
 */


// Implements hook_permission(). Defining user permissions for dashboard.
function cirro_dash_permission() {
  return array(
    'access dashboard' => array(
      'title' => t('Access Admin Dashboard'),
      'description' => t('Access content management dashboard.'),
    ),
  );
}

//Implements hook_menu() to create the dashboard page. 
function cirro_dash_menu() {

	// Init
	$items = array();

	// Admin Dashboard
  $items['admin/dash'] = array(
    'title' => 'Dashboard',
    'page callback' => 'cirro_dash_build',
    'access arguments' => array('access dashboard'),
		'type' => MENU_NORMAL_ITEM,
    'weight' => -20,
  );

  return $items;
}

/*
 * Implements hook_user_login.
 * Redirects user to their dashboard page once they have logged in.
 */
function cirro_dash_user_login() {

  // Set $redirection to the run/dash
  $redirection = 'admin/dash';

  // Unless there is already a redirection going, or the user is trying
  // to reset his password, we redirect to $redirection.
  if (
  	empty($_GET['destination']) &&
  	!is_null($redirection) &&
  	(!isset($_POST['form_id']) ||
  	$_POST['form_id'] != 'user_pass_reset')
  ) {
  
    $_GET['destination'] = $redirection;

  }

}

//Implements hook_theme() to style the page.
function cirro_dash_theme() {

	return array(
		'cirro_dash_weights_form' => array(
			'render element' => 'form',
		),
	);

}
/**
 * Admin Dashboard page build function().
 * Get all the entity info arrays
 * See if entity info arrays has a dashboard key
 * If a dashboard key exists add them to the cirro_entities array
 * Check cirro_entities against user permissions to admjust dashboard for user
 * Get the information from the database and build the table
 * Build the dashboard html
 */
function cirro_dash_build() {

	// Init
	global $user;
	$entity_info = array();
	$cirro_entities = array();
	$link = '';
	$add_content_links = '';
	$add_content_html = '';
	$edit_primary_links = '';
	$edit_primary_html = '';
	$reorder_links = '';
	$reorder_html = '';
	$types = array();
	$items = array();
	$rows = array();

	// Add sortable.js to page for table reordering capabilities
	$mod_path = drupal_get_path('module', 'cirro_dash');
	$js_path = "$mod_path/js/sorttable.js";
	drupal_add_js($js_path);

	// Load all entity info
	$entity_info = entity_get_info();
	
	// Loop through all entities
	foreach ( $entity_info as $mach_name => $info ) {
		
		// If the entity is a cirroCoreController and has a dashboard property
		if (
			$info['controller class'] === 'cirroCoreController' &&
			isset($info['dashboard'])
		) {
			
			// Add to the cirro entities array
			$cirro_entities[$mach_name] = $info;

		}

	}

/**
 * Check for user permissions
 */
	
	// Loop through the cirro entities to check for user permissions
	foreach ( $cirro_entities as $mach_name => $info ) {

		// If the user has permission to add content
		if ( user_access("add $mach_name") ) {

			// If the entity has the 'add' property in its dashboard array
			if ( in_array('add', $info['dashboard']) ) {
	
				// Append to the add content links
				$label = $info['label'];
				$link = l("<div class=\"span3 action-btn\">+ Add $label</div>", "admin/dash/$mach_name/add", array('html' => TRUE));
				$add_content_links .= "$link";
	
			}

		}

		// If user has permission to edit content
		if ( user_access("edit $mach_name") ) {

			// If the entity has the 'primary' property in its dashboard array
			if ( in_array('primary', $info['dashboard']) ) {
	
				// Don't show the edit buttons unless there is something to edit
				if ( cirro_core_single_load(1, $mach_name) === FALSE ) {

					// Create item with ID of 1
					$item = new stdClass;
					$item->id = 1;

					entity_get_controller($mach_name)->create($item);
				}
	
				// Append to the edit primary links
				$label = $info['label'];
				$link = l("Edit $label", "admin/dash/$mach_name/1/edit", array('html' => TRUE));
				$edit_primary_links .= "
					<div class=\"edit-primary-links\">
						<i class=\"icon-edit\"></i> <strong>$link</strong>
					</div>
				";
			}
	
			// If the entity has the 'weight' property in its dashboard array
			if ( in_array('weight', $info['dashboard']) ) {
	
				// Append to the reorder links
				$label = $info['label'];
				$link = l("Reorder $label", "admin/dash/weights/$mach_name", array('html' => TRUE));
				$reorder_links .= "
					<div class=\"reorder-links\">
						<i class=\"icon-move\"></i> <strong>$link</strong>
					</div>";
	
			}
	
			// If the entity has the 'table' property in its dashboard array
			if ( in_array('table', $info['dashboard']) ) {
	
				// Add to types array to allow for sorting by types
				$types[$mach_name] = $info;			
				
			}
			
		}

	}

/**
 * Get the info needed to build the table
 */

	// Filter form for table
	$get_form = drupal_get_form('cirro_dash_filter', $types);
	$filter_form = drupal_render($get_form);
	$filter = "
		<div id=\"table-filter-wrapper\" class=\"dash-section\">
			$filter_form
		</div>
	";

	// Get filter to limit types loaded for table
	if (
		isset($_SESSION['cirro_dash_type_filter']) &&
		$_SESSION['cirro_dash_type_filter'] !== '*'
	) {

		$filter_type = $_SESSION['cirro_dash_type_filter'];

		// Replace types array with filter selection
		$types = array(
			$filter_type => $types[$filter_type],
		);

	}

	// Loop through types to build table items
	foreach ( $types as $mach_name => $info ) {
		
		// Init
		$label = $info['label'];
		$table = $info['base table'];
		
		// Query specific data
		$query_string = "
			SELECT
				i.id,
				i.title,
				u.name AS user,
				i.created,
				i.changed,
				i.type,
				i.type_label
				FROM $table AS i
				JOIN users AS u
					ON i.uid = u.uid
		";
		
		// Query the database
		$query = db_query($query_string);
		
		// Get results
		$result = $query->fetchAll();
		
		// Add to items array
		$items = array_merge($items, $result);
		
	}

	// Build table rows
	foreach ( $items as $item ) {

		// Build table elements
		$id = $item->id;
		$type = $item->type;
		$type_label = $item->type_label;
		$title = l($item->title, "admin/dash/$type/$id/edit");
		//$type = $type_label;
		$author = $item->user;
		$created = format_date($item->created, 'short');
		$delete = l(
			'<i class="icon-remove"></i> ',
			"admin/dash/$type/{$id}/delete",
			array(
				'html' => TRUE,
				'attributes' => array(
					'class' => array('btn', 'btn-small'),
					'title' => 'Remove Image',
				),
				'query' => array(
					'destination' => "admin/dash"
				),
			)
		);
		
		// Check for 0 changed value
		if ( $item->changed == 0 ) {
			
			// Replace changed with text
			$updated = '<em>never</em>';
			
		} else {
		
			// Replace changed with formatted date
			$updated = format_date($item->changed, 'short');	
			
		}
		
		// Create table row
		$row = array(
			'data'=> array(
				$title,
				$type_label,
				$author,
				$created,
				$updated,
				$delete
				)
		);
		$rows[] = $row;
	}

/**
 * Create the html for the dashboard
 */
	
	// Build link for editing account info
	$user_link = l('Edit login info', "user/{$user->uid}/edit");
	$edit_user = "
		<div id=\"edit-user-wrapper\" class=\"dash-section\">
			<h3>$user_link</h3>
		</div>
	";
	
	// Build the add content html	
	$add_content_html = "
		<div id=\"add-content-wrapper\" class=\"dash-section\">
			<h2>ADD CONTENT</h2>
				<div class=\"action-links add-links\">
					<div class=\"row\">
						$add_content_links
					</div>
			</div>
		</div>
	";

	// Build the edit primary html
	$edit_primary_html = "
		<div id=\"edit-primary-wrapper\" class=\"span6 dash-section\">
			<h2>EDIT PRIMARY PAGES</h2>
			$edit_primary_links
		</div>";

	// Build the reorder html
	$reorder_html = "
		<div id=\"weights-wrapper\" class=\"span6 dash-section\">
			<h2>REORDER ITEMS</h2>
			$reorder_links
		</div>";	

	
	// Build existing table
	$header = array('TITLE', 'TYPE', 'AUTHOR', 'CREATED', 'UPDATED', 'DELETE');

	$table_vars = array(
		'header' => $header,
		'rows' => $rows,
		'attributes' => array('class' => array('sortable')),
		'caption' => '',
		'colgroups' => array(),
		'sticky' => '',
		'empty' => 'No Content of this Type',
	);
	
	$table = theme_table($table_vars); 
	$table_wrapped = "
	<div id=\"edit-existing-wrapper\" class=\"dash-section\">
		$table
	</div>";
	
	$html = "
		$add_content_html
		<div class=\"row-fluid\">
			$edit_primary_html
			$reorder_html
		</div>
		<div class=\"row-fluid\">
			<div id=\"table-outer-wrapper\" class=\"span12\">
				<h2>EDIT GENERAL CONTENT</h2>
				$filter
				$table
			</div>
		</div>
	";

	return $html;
}





/**
 * Add functions that allow for user-controlled capabilities
 * Filter by type
 * Reorder content
 */ 

/**
 * Admin Dash filter form. Allows user to filter types on their dashboard.
 */
function cirro_dash_filter($form, $form_state, $types_info) {

	// Init
	$form = array();
	$types = array();
	
	// Get default value
	if ( isset($_SESSION['cirro_dash_type_filter']) ) {

		// Load from session var
		$default = $_SESSION['cirro_dash_type_filter'];

	} else {

		// Show All
		$default = '*';

	}

	// Loop through types_info
	foreach ( $types_info as $type_mach => $info ) {

		$types[$type_mach] = $info['label'];

	}

	// Sort types
	asort($types);

	// Add show all value to types array
	$types = array_merge(array('*' => 'Show All'), $types);

	$form['type'] = array(
		'#type' => 'select',
		'#title' => 'Type',
		'#required' => true,
		'#default_value' => $default,
		'#options' => $types,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Filter',
	);
	
	$form['reset'] = array(
		'#type' => 'submit',
		'#value' => 'Reset',
	);
	
	return $form;
}

/**
 * Admin Dash filter form submit.
 */
function cirro_dash_filter_submit($form, &$form_state) {

	// Switch on submit pressed
	switch($form_state['values']['op']) {
		
		case 'Filter':
		
			if ( isset($form_state['values']['type']) ) {
			
				// Set filter to drop down value
				$_SESSION['cirro_dash_type_filter'] = $form_state['values']['type'];
				
			}
			
			break;

		case 'Reset':

			// Reset filter to Show All
			$_SESSION['cirro_dash_type_filter'] = '*';
			
			break;

	}

}






/**
 * Build weights page. Allows user to reorder content.
 */
function cirro_dash_weights_page($type) {

	// Init
	$html = '';

	// Build form
	$form = drupal_render(drupal_get_form('cirro_dash_weights_form', $type));
	
	// Add form to html
	$html .= $form;
	
	return $html;
}

/**
 * Universal weight form for reordering all node of a content type.
 *
 * @param $form
 *   Form array
 * @param &$form_state
 *   Form State array passed by reference
 * @parm $type
 *   Content Type to be reordered
 *
 * @return $form
 *   Build form array
 */
function cirro_dash_weights_form($form, &$form_state, $type) {

	// Init
	$form = array();
	$form['items'] = array();
	$form['items']['#tree'] = TRUE;
	
	// Query nodes of the specified type ordered by the weight field
	// and then name.
	$query = new EntityFieldQuery;
	$result = $query
		->entityCondition('entity_type', 'node')
		->propertyCondition('type', $type)
		->fieldOrderBy('field_weight', 'value', 'ASC')
		->execute();

	// Check for results
	if(isset($result['node'])) {
	
		// Build weight options
		$weight_options = array();
		for($i = -10; $i <= 10; $i++) {
			$weight_options[$i] = $i;
		}

		// Load nodes
		$nodes = entity_load('node', array_keys($result['node']));
		
		// Loop through nodes
		foreach($nodes as $nid => $node) {
		
			// Init
			$default_weight = 0;
		
			// Add node array to items
			$form['items'][$nid] = array();
			
			// Build title markup element
			$form['items'][$nid]['title'] = array(
				'#markup' => $node->title,
			);

			// Build weight default value
			if(
				isset($node->field_weight) &&
				!empty($node->field_weight['und'][0]['value'])
			) {

				// Load field value
				$default_weight = $node->field_weight['und'][0]['value'];
			}

			// Build weight field
			$form['items'][$nid]['weight'] = array(
				'#type' => 'select',
				'#title' => t('Weight'),
				'#default_value' => $default_weight,
				'#options' => $weight_options,
				'#attributes' => array(
					'class' => array('weight-group'),
				),
			);
			
			
			// Build hidden nid field
			$form['items'][$nid]['nid'] = array(
				'#type' => 'hidden',
				'#value' => $nid,
			);
		}

		// Submit
		$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t('Save Order'),
		);
	}
	
	return $form;
}

/**
 * Weights form submit
 */
function cirro_dash_weights_form_submit($form, &$form_state) {

	// Loop through form items
	foreach($form_state['values']['items'] as $item) {

		// Load node object
		$node = node_load($item['nid']);
		// Set new weight
		$node->field_weight['und'][0]['value'] = $item['weight'];
		
		// Save
		node_save($node);
	}

	// Success message
	drupal_set_message('New Order Saved');
}

/**
 * Theme weights form
 *
 * @param $variables
 *   Variables array passed by theme system.
 *   Full form array can be found at 'form' index.
 *
 * @return
 *   Markup for form as a table w/ drag and drop
 */
function theme_cirro_dash_weights_form($variables) {

	// Init
	$output = '';
	$form = $variables['form'];
	
	// Check for items before doing anything else
	if(!isset($form['items'])) {
	
		// Return empty message
		$output = 'No items were found of this type';
		
		return $output;
	}

	// Activate tabledrag capabilities
	drupal_add_tabledrag('draggable-table', 'order', 'sibling', 'weight-group');
	
	// Tabls init
	$headers = array('Name', 'Weight');
	$rows = array();

	// Load items
	$items = element_children($form['items']);

	// Loop through items
	foreach($items as $index) {
	
		// Init
		$row = array();
	
		// Load indvidual item
		$item = &$form['items'][$index];

		//Build row
		$row[] = drupal_render($item['title']);
		$row[] = drupal_render($item['weight']);
		
		// Add to rows
		$rows[] = array(
			'data' => $row,
			'class' => array('draggable'),
		);
	}
	
	// Put together table variables
	$table_vars = array(
		'header' => $headers,
		'rows' => $rows,
		'attributes' => array(
			'id' => 'draggable-table',
		),
		'caption' => 'Drag and Drop to change order',
		'colgroups' => array(),
		'sticky' => '',
		'empty' => 'No Items Found',
	);





	// Render table
	$output .= theme_table($table_vars);

	// Render remaining form elements which should just be the submit button
	$output .= drupal_render_children($form);

	return $output;
}